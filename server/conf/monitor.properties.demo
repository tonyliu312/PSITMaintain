###############进程监控配置########################

#WEBSPHERE DM 服务器的地址
nodeagenthost=127.0.0.1

#WEBSPHERE DM的端口,如果没有启集群，则为所在服务器的NodeAgent的端口
nodeagentport=8879

#NC的配置文件
propfile=../../ierp/bin/prop.xml

#中间件端口响应时间的阀值，单位为毫秒。即当响应时间超过这个阀值，则认为端口探测失败。
notResponseThreshold=5000

#端口探测的次数，即如果连续10此端口探测失败，则认为中间件已经不能正常工作，需要重启。
fail.trytimes=6

#探测端口的servlet
servlet=service/monitorservlet

#java Heap探测的阀值，即当（heap free/heap total）剩于低于这个阀值,则认为探测失败。
MemoryThreshold=0.005

#连接池使用阀值,单位位百分比.如果连接池使用超过50%,则发送快照消息.
MW_THREAD_CHECK_CONNECTIONPOOLUSED=50

#连续java heap探测的次数，即当连续10次探测失败，则发送快照消息或者重启中间件。
MemoryTrytimes=10

#写入jvm heap信息的时间间隔，单位为秒。日志会写入./logs/mw/
logDuration=10

#WAS 的 管理员信息。如果was admin 启用了安全管理，则需要设置。
#adminusername=
#adminpassword=

#检查端口失败是否重启.
restartWhenCheckResponsefailure=true

#检测JVM内存失败是否重启,如果为否,则只是发送报警消息.
restartWhenCheckMemoryfailure=false

#检查中间件失败是否要做DUMP.包括HEAPDUMP和Thread dump.
dumpHeapWhenRestart=false

#################中间件线程监控#################################

#中间件线程检查时间间隔,单位为秒
MW_THREAD_CHECK_INTERVAL=120

#中间件线程耗时的阀值,单位为秒.超过这个时间则发送快照消息
MW_THREAD_CHECK_MAXCOSTTIME=180

#中间件线程执行的SQL最大数量,如果超过这个值,则发送快照消息
MW_THREAD_CHECK_MAXCOUNTOFSQL=1000

#中间件线程最耗时的SQL,单位为秒.如果SQL的耗时超过这个值,则发送快照消息
MW_THREAD_CHECK_MAXCOSTOFONESQL=120

###############操作系统监控配置##########################################

#CPU
#CPU监控的时间间隔，单位秒
CPU_CHECK_DURATION=5

#CPU监控结果记入日志的阀值,单位为繁忙(busytime%)百分比。日志会写到../logs/cpu/
CPU_LOG_THREDTHOLD=0

#windows
WINDOWS_CPU_COMMAND=cscript ./lib/monitorcpu.vbs

##unix
CPU_COMMAND=mpstat

AIX_CPU_USER=us
AIX_CPU_SYS=sy
AIX_CPU_IDLE=idl
AIX_CPU_WAIT=wa
AIX_CPU_CPUNAME=cpu

SUN_CPU_USER=usr
SUN_CPU_SYS=sys
SUN_CPU_IDLE=idl
SUN_CPU_WAIT=wt
SUN_CPU_CPUNAME=CPU

HP_CPU_USER=usr
HP_CPU_SYS=syS
HP_CPU_IDLE=idl
HP_CPU_WAIT=wt
HP_CPU_CPUNAME=CPU

LINUX_CPU_USER=usr
LINUX_CPU_SYS=sys
LINUX_CPU_IDLE=idl
LINUX_CPU_WAIT=wt
LINUX_CPU_CPUNAME=CPU

#内存
#windows检查内存执行的脚本.
WINDOWS_MEM_COMMAND=cscript ./lib/monitormem.vbs

####内存监控的时间间隔，单位秒
MEM_CHECK_DURATION=5

#Memory监控结果记入日志的阀值,单位为繁忙(used%)百分比。日志会写入./logs/memory
MEM_LOG_THREDTHOLD=1
MEM_COMMAND=vmstat

AIX_MEM_FREE=fr
AIX_MEM_PI=pi
AIX_MEM_PO=po

SUN_MEM_FREE=free
SUN_MEM_PI=pi
SUN_MEM_PO=po

HP_MEM_FREE=free
HP_MEM_PI=pi
HP_MEM_PO=po

LINUX_MEM_FREE=free
LINUX_MEM_PI=pi
LINUX_MEM_PO=po


AIX_TOTAL_MEMORY_CMD=vmstat

SOLARIS_TOTAL_MEMORY_CMD= prtconf|grep 'Memory'

HP_TOTAL_MEMORY_CMD=vmstat

LINUX_TOTAL_MEMORY_CMD=vmstat

##################日志抽取配置#####################################

#NC日志的目录
NC_LOG_DIR=../../nclogs/

#日志查询的线程数
LOG_QUERY_THREAD_NUM=1

#查询引擎类
LOG_QUERY_ENGINE_CLASS=nc.monitor.service.loganalyze.TextQueryEngine

#日志分析用前缀。
LOG_QUERY_PREFIX=$$

#查询结果在内存中的链表长度。即当查询结果超过这个数值，则将链表数据缓存到硬盘，清空链表。
LOGENTRY_CACHE_NUMBER=1000

############################数据库配置########################

#######进行健康检查时执行的脚本,个数最大为8个.注意检查脚本必须为select sid,serial#,client_identifier,machine from....
#######数据库健康检查目前只是支持ORACLE.如果是RAC环境,则将v$session 改为gv$session
#监控时间间隔,单位为秒,-1不监控。只是供客户端操纵。
DB_RUNTIMECHECK_DURATION=10

#进行健康检查时执行的脚本,个数最大为8个.检查失败后会发送快照消息.
HEALTH_RUNTIME_CHECK_DB__SQL_1=select sid,serial#,client_identifier,machine from v$session where username=upper('[user]') and status='ACTIVE' and last_call_et>60 order by last_call_et desc
#HEALTH_RUNTIME_CHECK_DB__SQL_2=select a.sid sid,a.serial# serial#,a.client_identifier client_identifier,a.machine machine from v$session a, v$sqlstats b,v$session c  where a.event like 'enq:%'   and a.last_call_et > 2 and c.blocking_session is null   and a.blocking_session=c.sid    and a.sql_id = b.sql_id  order by a.last_call_et desc


#DUMP执行脚本,个数最大为8个,如果是RAC环境,需要将脚本中的视图转为GV视图,同时测试一下这些脚本的效率.
#锁等待
DB_DUMP_SQL_1=select t.*,'dba_waiters' tablename from dba_waiters t

#session信息
DB_DUMP_SQL_2=select s.client_identifier, s.sid, s.serial#,sql.sql_fulltext, s.last_call_et, s.event, sql.SQL_ID, child_number,s.sql_hash_value from v$session s, v$sql sql where    s.sql_address = sql.ADDRESS   and  s.username = upper('[user]')   and s.status = 'ACTIVE' and s.last_call_et>10 order by sid 

#执行计划
DB_DUMP_SQL_3=select * from (select hash_value||'***'||rpad('|'||substr(lpad(' ',1*(depth-1))||operation||decode(options, null,'',' '||options), 1, 32), 33, ' ')||'|'|| rpad(decode(id, 0, '----- '||to_char(hash_value)||' -----' , substr(decode(substr(object_name, 1, 7), 'SYS_LE_', null, object_name) ||' ',1, 20)), 21, ' ')||'|'|| lpad(decode(cardinality,null,' ', decode(sign(cardinality-1000), -1, cardinality||' ', decode(sign(cardinality-1000000), -1, trunc(cardinality/1000)||'K', decode(sign(cardinality-1000000000), -1, trunc(cardinality/1000000)||'M', trunc(cardinality/1000000000)||'G')))), 7, ' ') || '|' || lpad(decode(bytes,null,' ', decode(sign(bytes-1024), -1, bytes||' ', decode(sign(bytes-1048576), -1, trunc(bytes/1024)||'K', decode(sign(bytes-1073741824), -1, trunc(bytes/1048576)||'M', trunc(bytes/1073741824)||'G')))), 6, ' ') || '|' || lpad(decode(cost,null,' ', decode(sign(cost-10000000), -1, cost||' ', decode(sign(cost-1000000000), -1, trunc(cost/1000000)||'M', trunc(cost/1000000000)||'G'))), 8, ' ') || '|' as "Explain plan" from v$sql_plan where hash_value in (select s.sql_hash_value from v$session s where  s.username = upper('[user]')  and s.status = 'ACTIVE' and s.last_call_et>10 ))

#锁信息
#DB_DUMP_SQL_4=select a.event,b.sql_text, b.sql_fulltext, a.sid,a.client_identifier, a.event,a.last_call_et, c.sid blocking_session   from v$session a, v$sqlstats b,v$session c  where a.event like 'enq:%'   and a.last_call_et > 2 and c.blocking_session is null   and a.blocking_session=c.sid    and a.sql_id = b.sql_id  order by a.last_call_et desc

######进行健康检查的脚本,检查失败后会发送WARNING消息.

#进行配置检查的时间间隔,单位为秒,-1为不检查.
DB_CONFCHECK_DURATION=120

#表空间使用率超过90%
HEALTH_CONF_CHECK_DB__SQL_1=select * from ( SELECT a.tablespace_name,total "total(bytes)",free "free(bytes)",(total-free) "used(bytes)",ROUND((total-free)/total,4)*100 used FROM  (SELECT tablespace_name,SUM(bytes) free FROM DBA_FREE_SPACE GROUP BY tablespace_name ) a, (SELECT tablespace_name,SUM(bytes) total FROM DBA_DATA_FILES GROUP BY tablespace_name) b WHERE a.tablespace_name=b.tablespace_name and (a.tablespace_name like 'NC%' or a.tablespace_name like 'T%'  or a.tablespace_name like 'UNDO%')  ) where used>=90

#active的回滚段超过90%
HEALTH_CONF_CHECK_DB__SQL_2=select * from (select sum(blocks) / (select sum(blocks) from dba_undo_extents)*100 ratio, status  from dba_undo_extents where status = 'ACTIVE' group by status) where ratio>=90

######活动会话更新时间间隔,单位秒.
ACTIVESESSSION_CHECK_DURATION=5