#@版本信息
#版本信息


version=1.0
#@进程监控
#WEBSPHERE DM 服务器的地址,如果不是was中间件,则可将它设为空.nodeagenthost=,for weblogic,using weblogic manage server.


nodeagenthost=127.0.0.1
#WEBSPHERE DM的端口,如果没有启集群，则为所在服务器的NodeAgent的端口,默认为8879,if weblogic,default manage server:7001

nodeagentport=8879
#nc,was,wls,default is was
servertype=was
#WAS 的 管理员信息。如果was admin 启用了安全管理，则需要设置。for weblogic,此参数必须设置.

adminusername=
adminpassword=
#NC的配置文件,更改后需要重启
propfile=/Users/Tony/DEV_ENV/NC_UAP_MODULES/ierp/bin/prop.xml
#中间件端口响应时间的阀值，单位为毫秒。即当响应时间超过这个阀值，则认为端口探测失败。


notResponseThreshold=5000
#端口探测的次数，即如果连续6此端口探测失败，则认为中间件已经不能正常工作，需要重启。

fail.trytimes=8
#探测端口的servlet,不建议修改

servlet=service/monitorservlet
#java Heap探测的阀值，即当（heap free/heap total）剩于低于这个阀值,则认为探测失败。

MemoryThreshold=0.005
#连续java heap探测的次数，即当连续10次探测失败，则发送快照消息或者重启中间件。

MemoryTrytimes=10
#写入jvm heap信息的时间间隔，单位为秒。日志会写入./logs/mw/

logDuration=10
#检查端口失败是否重启.

restartWhenCheckResponsefailure=true
#检测JVM内存失败是否重启,如果为否,则只是发送报警消息.

restartWhenCheckMemoryfailure=false
#检查中间件失败是否要做HEAP DUMP.

dumpHeapWhenRestart=false
#检查中间件失败是否要做THREAD DUMP

dumpThreadWhenRestart=false
#N1_PLUGIN_FILE=D:\\IBM\\HTTPServer\\Plugins\\config\\webserver1\\plugin-cfg.xml
N1_PLUGIN_FILE=
#N1_STANDBYSERVER_KEY=<Server Name="localhostNode01_ncMem01"/>
N1_STANDBYSERVER_KEY=
#enable lock gc.
EnableLOCKGC=true
#命令行关闭中间件脚本 shutdowncmd=cmd /c d:/ufsoft/nchome56/startup.bat

shutdowncmd=
#命令行启动中间件脚本,例如：startupcmd=cmd /c d:/ufsoft/nchome56/startup.bat

startupcmd=
#@线程监控
#中间件WEb线程检查时间间隔,单位为秒


MW_THREAD_CHECK_INTERVAL=120
#中间件一个WEB线程运行时间的阀值,单位为秒.超过这个时间仍没有结束则发送快照消息

MW_THREAD_CHECK_MAXCOSTTIME=180
#中间件一个WEB线程执行的SQL最大数量,如果超过这个值,则发送快照消息

MW_THREAD_CHECK_MAXCOUNTOFSQL=1000
#中间件一个线程最耗时的SQL阀值,单位为秒.如果SQL的耗时超过这个值,则发送快照消息

MW_THREAD_CHECK_MAXCOSTOFONESQL=120
#连接池使用阀值,单位位百分比.如果连接池使用超过50%,则发送快照消息.

MW_THREAD_CHECK_CONNECTIONPOOLUSED=-1
#@system监控
#systemmonitor 采集时间间隔
SYSTEM_MONITOR_TIME=10
#@CPU监控


#CPU监控的时间间隔，单位秒

CPU_CHECK_DURATION=5
#CPU监控结果记入日志的阀值,单位为繁忙(busytime%)百分比。日志会写到../logs/cpu/

CPU_LOG_THREDTHOLD=0
#windowscpu命令

WINDOWS_CPU_COMMAND=cscript ./lib/monitorcpu.vbs
#unix
CPU_COMMAND=mpstat
#AIX mpstat的对应字段

AIX_CPU_USER=us
AIX_CPU_SYS=sy
AIX_CPU_IDLE=idl
AIX_CPU_WAIT=wa
AIX_CPU_CPUNAME=cpu
#saloris mpstat的对应字段

SUN_CPU_USER=usr
SUN_CPU_SYS=sys
SUN_CPU_IDLE=idl
SUN_CPU_WAIT=wt
SUN_CPU_CPUNAME=CPU
#hpunix mpstat的对应字段

HP_CPU_USER=usr
HP_CPU_SYS=syS
HP_CPU_IDLE=idl
HP_CPU_WAIT=wt
HP_CPU_CPUNAME=CPU
#linux mpstat的对应字段

LINUX_CPU_USER=usr
LINUX_CPU_SYS=sys
LINUX_CPU_IDLE=idl
LINUX_CPU_WAIT=wt
LINUX_CPU_CPUNAME=CPU
#@内存监控
#windows检查内存执行的脚本.


WINDOWS_MEM_COMMAND=cscript ./lib/monitormem.vbs
#内存监控的时间间隔，单位秒

MEM_CHECK_DURATION=5
#Memory监控结果记入日志的阀值,单位为繁忙(used%)百分比。日志会写入./logs/memory

MEM_LOG_THREDTHOLD=1
#unix/linux内存监控命令

MEM_COMMAND=vmstat
#AIX vmstat 对应字段

AIX_MEM_FREE=fr
AIX_MEM_PI=pi
AIX_MEM_PO=po
#saloris vmstat对应字段

SUN_MEM_FREE=free
SUN_MEM_PI=pi
SUN_MEM_PO=po
#hpunix vmstat 对应字段

HP_MEM_FREE=free
HP_MEM_PI=pi
HP_MEM_PO=po
#linux vmstat 对应字段

LINUX_MEM_FREE=free
LINUX_MEM_PI=pi
LINUX_MEM_PO=po
AIX_TOTAL_MEMORY_CMD=vmstat
SOLARIS_TOTAL_MEMORY_CMD= prtconf|grep 'Memory'
HP_TOTAL_MEMORY_CMD=vmstat
LINUX_TOTAL_MEMORY_CMD=vmstat
#@日志抽取
#NC日志的目录


NC_LOG_DIR=../../nclogs/
#日志查询的线程数

LOG_QUERY_THREAD_NUM=1
#查询引擎类

LOG_QUERY_ENGINE_CLASS=nc.monitor.service.loganalyze.TextQueryEngine
#日志分析用前缀。

LOG_QUERY_PREFIX=$$
#查询结果在内存中的链表长度。即当查询结果超过这个数值，则将链表数据缓存到硬盘，清空链表。

LOGENTRY_CACHE_NUMBER=1000
#@数据库监控
#监控时间间隔,单位为秒,-1不监控。只是供客户端操纵。检查失败会发送快照消息.


DB_RUNTIMECHECK_DURATION=10
#进行健康检查时执行的脚本,个数最大为4个.检查失败后会发送快照消息.数据库健康检查目前只是支持ORACLE.如果是RAC环境,则将v$session 改为gv$session
HEALTH_RUNTIME_CHECK_DB__SQL_1=select sid,serial#,client_identifier,machine from v$session where username=upper('[user]') and status='ACTIVE' and last_call_et>60 order by last_call_et desc

HEALTH_RUNTIME_CHECK_DB__SQL_2=
HEALTH_RUNTIME_CHECK_DB__SQL_3=
HEALTH_RUNTIME_CHECK_DB__SQL_4=
#!DUMP执行脚本,个数最大为8个,如果是RAC环境,需要将脚本中的视图转为GV视图,要注意测试一下这些脚本的效率!
#锁等待


DB_DUMP_SQL_1=select t.*,'dba_waiters' tablename from dba_waiters t
#session信息
DB_DUMP_SQL_2=select s.client_identifier, s.sid, s.serial#,sql.sql_fulltext, s.last_call_et, s.event, sql.SQL_ID, child_number,s.sql_hash_value from v$session s, v$sql sql where    s.sql_address = sql.ADDRESS   and  s.username = upper('[user]')   and s.status = 'ACTIVE' and s.last_call_et>10 order by sid 
#执行计划
#DB_DUMP_SQL_3=select * from (select hash_value||'***'||rpad('|'||substr(lpad(' ',1*(depth-1))||operation||decode(options, null,'',' '||options), 1, 32), 33, ' ')||'|'|| rpad(decode(id, 0, '----- '||to_char(hash_value)||' -----' , substr(decode(substr(object_name, 1, 7), 'SYS_LE_', null, object_name) ||' ',1, 20)), 21, ' ')||'|'|| lpad(decode(cardinality,null,' ', decode(sign(cardinality-1000), -1, cardinality||' ', decode(sign(cardinality-1000000), -1, trunc(cardinality/1000)||'K', decode(sign(cardinality-1000000000), -1, trunc(cardinality/1000000)||'M', trunc(cardinality/1000000000)||'G')))), 7, ' ') || '|' || lpad(decode(bytes,null,' ', decode(sign(bytes-1024), -1, bytes||' ', decode(sign(bytes-1048576), -1, trunc(bytes/1024)||'K', decode(sign(bytes-1073741824), -1, trunc(bytes/1048576)||'M', trunc(bytes/1073741824)||'G')))), 6, ' ') || '|' || lpad(decode(cost,null,' ', decode(sign(cost-10000000), -1, cost||' ', decode(sign(cost-1000000000), -1, trunc(cost/1000000)||'M', trunc(cost/1000000000)||'G'))), 8, ' ') || '|' as "Explain plan" from v$sql_plan where hash_value in (select s.sql_hash_value from v$session s where  s.username = upper('[user]')  and s.status = 'ACTIVE' and s.last_call_et>10 ))


DB_DUMP_SQL_4=
DB_DUMP_SQL_5=
DB_DUMP_SQL_6=
DB_DUMP_SQL_7=
DB_DUMP_SQL_8=
#!进行健康检查的脚本,检查失败后会发送WARNING消息.
#进行配置检查的时间间隔,单位为秒,-1为不检查.


DB_CONFCHECK_DURATION=-1
#表空间使用率超过90%

HEALTH_CONF_CHECK_DB__SQL_1=select * from ( SELECT a.tablespace_name,total "total(bytes)",free "free(bytes)",(total-free) "used(bytes)",ROUND((total-free)/total,4)*100 used FROM  (SELECT tablespace_name,SUM(bytes) free FROM DBA_FREE_SPACE GROUP BY tablespace_name ) a, (SELECT tablespace_name,SUM(bytes) total FROM DBA_DATA_FILES GROUP BY tablespace_name) b WHERE a.tablespace_name=b.tablespace_name and (a.tablespace_name like 'NC%' or a.tablespace_name like 'T%'  or a.tablespace_name like 'UNDO%')  ) where used>=90
#active的回滚段超过90%

HEALTH_CONF_CHECK_DB__SQL_2=select * from (select sum(blocks) / (select sum(blocks) from dba_undo_extents)*100 ratio, status  from dba_undo_extents where status = 'ACTIVE' group by status) where ratio>=90
#!
#活动会话更新时间间隔,单位秒.

ACTIVESESSSION_CHECK_DURATION=10
#@消息服务
#消息处理器取消息的时间间隔,单位为毫秒


MESSAGE_FETCH_DURATION=20
#消息队列的最大长度

MESSAGE_QUENE_LENGTH=10
#每天自动清理快照时间,默认为0点,值为0-23中整数

PURGE_SNAPSHOT_HOUR=0
#有消息时是否发送邮件通知.

MESSAGE_SEND_MAIL=false
#邮件发送人

MAIL_SENDER=monitor@ufida.com.cn
#邮件接受人的地址.最多支持4个

MAIL_SENDTO_1=
MAIL_SENDTO_2=
MAIL_SENDTO_3=
MAIL_SENDTO_4=
#@补丁管理
#nchome主目录


NC_HOME=../../
#后台线程代码版本时间间隔,单位为分钟

VERSION_COMPARE_INTERVAL=60
#补丁应用回滚时服务器运行状态检查

APPLYPATCH_NEED_SERVERDOWN=false
#补丁索引文件更新时间

PATCH_INDEX_FILE_UPDATE=00:00
#补丁索引文件保存记录数

FILE_PATCH_LIMIT=500
#是否异步执行扫描

RESCAN_ASYNC=Y
#@emailremotecall
#远程调用消息处理器

remotecall_PROCESSOR=nc.monitor.mail.processor.RemoteCallMsgProcessor
#快照消息处理器

SNAPSHOT_PROCESSOR=nc.monitor.mail.processor.SnapshotProcessor
#收邮件from

POP_REMOTECALL_EMAILADDR=
#发送邮件时指定的邮件from

SMTP_SRC_MAIL_ADDR=
#邮件访问控制列表,用;格开

MAIL_ACCESS_RULE=
#邮件不满足规则将邮件从邮件服务器上删除

DelMail_OutOfRule=false

#@在线用户
#查询在线用户时间间隔,单位秒


USER_COUNT_INTERVAL=120


#@NPR
#NPR相关作业主目录

NPR_HOME=./NPR
#NPR日志快照主目录

NPR_DEF_LOG=./NPR/Logs
#一次远程调用的SQL数量上限

NPR_REMOTECALL_SQLNUM_LIMIT=1000
#一个操作的远程调用次数上限

NPR_REMOTECALL_TIMES_LIMIT=10
#生成图片时显示的点数

NPR_CHART_POINT_COUNT=50
#NPR Top N插件统计参数

NPR_TOP_N=10
