#link
SELECT er.context_info as client_identifier,SUBSTRING(text,(statement_start_offset / 2) + 1,((CASE statement_end_offset WHEN -1 THEN DATALENGTH(text) ELSE statement_end_offset END - statement_start_offset) / 2) + 1) AS sql_text,SUBSTRING(text, 1, (statement_start_offset / 2)) AS parameter_text,er.total_elapsed_time as total_elapsed_time_ms,er.session_id,er.status,isnull(er.wait_type,'no') as wait_type,er.wait_resource,er.blocking_session_id as blocking_session_id,er.start_time, DB_NAME(er.database_id) dbname,es.host_name, er.plan_handle as plan_handle_link FROM sys.dm_exec_requests er CROSS APPLY sys.dm_exec_sql_text(sql_handle) st left outer join sys.dm_exec_sessions es on es.session_id=er.session_id where er.context_info = [client_identifier] and er.database_id=db_id() ORDER BY er.total_elapsed_time DESC

#活动会话
SELECT er.context_info as client_identifier,SUBSTRING(text,(statement_start_offset / 2) + 1,((CASE statement_end_offset WHEN -1 THEN DATALENGTH(text) ELSE statement_end_offset END - statement_start_offset) / 2) + 1) AS sql_text,SUBSTRING(text, 1, (statement_start_offset / 2)) AS parameter_text,er.total_elapsed_time as total_elapsed_time_ms,er.session_id,er.status,isnull(er.wait_type,'no') as wait_type,er.wait_resource,er.blocking_session_id as blocking_session_id,er.start_time, DB_NAME(er.database_id) dbname,es.host_name, es.login_name,es.program_name,er.plan_handle as plan_handle_link FROM sys.dm_exec_requests er CROSS APPLY sys.dm_exec_sql_text(sql_handle) st left outer join sys.dm_exec_sessions es on es.session_id=er.session_id where  er.database_id=db_id() ORDER BY er.total_elapsed_time DESC

#耗时sql
SELECT er.context_info as client_identifier,SUBSTRING(text, (statement_start_offset / 2) + 1,((CASE statement_end_offset WHEN -1 THEN DATALENGTH(text) ELSE statement_end_offset END - statement_start_offset) / 2) + 1) AS sql_text,SUBSTRING(text, 1, (statement_start_offset / 2)) AS parameter_text,er.total_elapsed_time as total_elapsed_time_ms, isnull(er.wait_type, 'no') as wait_type,er.wait_resource,er.session_id,er.status, er.blocking_session_id as blocking_session_id, DB_NAME(er.database_id) as dbname,es.host_name, er.start_time, plan_handle as plan_handle_link FROM sys.dm_exec_requests er CROSS APPLY sys.dm_exec_sql_text(sql_handle) left outer join sys.dm_exec_sessions es on es.session_id=er.session_id where er.database_id=db_id() ORDER BY total_elapsed_time_ms DESC;

#SESSION
select * from sys.dm_exec_sessions where status='running'

#OS资源等待
select * from sys.dm_os_wait_stats order by wait_time_ms desc

#OS信息
select sqlserver_start_time N'SQL本次启动时间',cpu_count/hyperthread_ratio N'物理CPU数',cpu_count N'逻辑CPU数',physical_memory_kb N'物理内存(KB)', virtual_memory_kb N'user_mode虚拟内存(KB)',committed_kb N'内存管理器已提交内存(KB)',committed_target_kb N'内存管理器可占用内存量(KB)',stack_size_in_bytes N'SQL每个线程可调用堆栈(Bytes)',deadlock_monitor_serial_number N'死锁监视序列ID',max_workers_count N'可创建最大工作线程数',process_kernel_time_ms N'kernel_mode线程总时间(MS)',process_user_time_ms N'user_mode线程总时间(MS)',affinity_type_desc N'线程与CPU关联类型',virtual_machine_type_desc N'是否在虚拟环境运行' from sys.dm_os_sys_info

#LOCK内存使用情况
select type,name,sum(pages_kb) as pages_kb from sys.dm_os_memory_clerks where name like 'Lock Manager :%' group by name,type

#SQL占用内存资源
select mg.session_id,temp.blocking_session_id,temp.sql_text,temp.parameter_text,dop as parallel,request_time,grant_time,requested_memory_kb,granted_memory_kb,required_memory_kb as min_required_memory_kb,used_memory_kb,max_used_memory_kb,query_cost,wait_time_ms,plan_handle as plan_handle_link from sys.dm_exec_query_memory_grants mg left outer join ( select er.session_id,er.blocking_session_id,SUBSTRING(text, (statement_start_offset / 2) + 1,((CASE statement_end_offset WHEN -1 THEN DATALENGTH(text) ELSE statement_end_offset END - statement_start_offset) / 2) + 1) AS sql_text,SUBSTRING(text, 1, (statement_start_offset / 2)) AS parameter_text from sys.dm_exec_requests er cross apply sys.dm_exec_sql_text(er.sql_handle) st) temp on mg.session_id=temp.session_id order by granted_memory_kb desc

#正在执行的耗时sql
SELECT er.context_info as client_identifier,SUBSTRING(text,(statement_start_offset / 2) + 1,((CASE statement_end_offset WHEN -1 THEN DATALENGTH(text) ELSE statement_end_offset END - statement_start_offset) / 2) + 1) AS sql_text,SUBSTRING(text, 1, (statement_start_offset / 2)) AS parameter_text,er.total_elapsed_time as total_elapsed_time_ms,er.session_id,er.status,isnull(er.wait_type,'no') as wait_type,er.wait_resource,er.blocking_session_id,er.start_time, DB_NAME(er.database_id) dbname,es.host_name,er.plan_handle as plan_handle_link FROM sys.dm_exec_requests er CROSS APPLY sys.dm_exec_sql_text(sql_handle) left outer join sys.dm_exec_sessions es on es.session_id=er.session_id where  er.database_id=db_id() ORDER BY er.total_elapsed_time DESC

#执行计划缓冲池中SQL的统计
SELECT SUBSTRING(ST.text,(QS.statement_start_offset / 2) + 1,((CASE statement_end_offset WHEN -1 THEN DATALENGTH(st.text) ELSE QS.statement_end_offset END - QS.statement_start_offset) / 2) + 1) AS '执行语句',SUBSTRING(ST.text,1,(QS.statement_start_offset / 2)) AS '参数列表',QS.creation_time '编译计划的时间',QS.last_execution_time '上次执行计划的时间',QS.execution_count '执行总次数', QS.total_elapsed_time / 1000 /QS.execution_count as '平均每次执行耗时（毫秒）',QS.total_logical_reads N'逻辑读取总次数', QS.total_logical_reads/QS.execution_count as '平均每次执行消耗逻辑读',QS.total_physical_reads '物理读取总次数', QS.total_worker_time / 1000 'CPU 时间总量（毫秒）', QS.total_logical_writes '逻辑写入总次数', QS.total_elapsed_time / 1000 N'总花费时间（毫秒）' FROM sys.dm_exec_query_stats AS QS CROSS APPLY sys.dm_exec_sql_text(QS.sql_handle) AS ST where SUBSTRING(st.text,(qs.statement_start_offset / 2) + 1, ((CASE statement_end_offset WHEN -1 THEN DATALENGTH(st.text) ELSE qs.statement_end_offset END - qs.statement_start_offset) / 2) + 1) not like '%fetch%' ORDER BY QS.total_elapsed_time / 1000 /QS.execution_count desc,QS.total_logical_reads/QS.execution_count DESC

#当前数据库是否启用了多版本
select  case is_read_committed_snapshot_on when 1 then '开启' else '没有开启. 开启语句: ' + 'ALTER DATABASE ' + db_name() + ' set READ_COMMITTED_SNAPSHOT ON WITH ROLLBACK IMMEDIATE ' end as is_read_committed_snapshot_on from sys.databases where database_id=DB_ID() 

#当前数据库是否启用了自动收集统计信息
select case is_auto_create_stats_on  when 1 then '开启' else '没有开启. 开启语句: ' + 'ALTER DATABASE ' + db_name() + ' set AUTO_CREATE_STATISTICS ON WITH ROLLBACK IMMEDIATE ' end as is_auto_create_statistics,case is_auto_update_stats_on  when 1 then '开启' else '没有开启. 开启语句: ' + 'ALTER DATABASE ' + db_name() + ' set AUTO_UPDATE_STATISTICS ON WITH ROLLBACK IMMEDIATE ' end as is_auto_update_statistics from sys.databases where database_id=DB_ID() 

#任务
SELECT sJSTP.database_name,sJOB.job_id,sJOB.name as job_name,sJSTP.step_id ,sJSTP.step_name ,CASE sJSTP.subsystem  WHEN 'ActiveScripting' THEN 'ActiveX Script' WHEN 'CmdExec' THEN 'Operating system (CmdExec)' WHEN 'PowerShell' THEN 'PowerShell'   WHEN 'Distribution' THEN 'Replication Distributor'   WHEN 'Merge' THEN 'Replication Merge'   WHEN 'QueueReader' THEN 'Replication Queue Reader'   WHEN 'Snapshot' THEN 'Replication Snapshot'   WHEN 'LogReader' THEN 'Replication Transaction-Log Reader'   WHEN 'ANALYSISCOMMAND' THEN 'SQL Server Analysis Services Command'   WHEN 'ANALYSISQUERY' THEN 'SQL Server Analysis Services Query' WHEN 'SSIS' THEN 'SQL Server Integration Services Package'   WHEN 'TSQL' THEN 'Transact-SQL script (T-SQL)'   ELSE sJSTP.subsystem  END AS  subsystem,  sJSTP.command ,  CASE WHEN sJOBH.run_date IS NULL   OR sJOBH.run_time IS NULL THEN NULL   ELSE CAST(CAST(sJOBH.run_date AS CHAR(8)) + ' '  + STUFF(STUFF(RIGHT('000000'   + CAST(sJOBH.run_time AS VARCHAR(6)),   6), 3, 0, ':'), 6, 0, ':') AS DATETIME)   END AS last_run_time ,   CASE sJOBH.run_status  WHEN 0 THEN '失败'   WHEN 1 THEN '成功'   WHEN 2 THEN '重试'   WHEN 3 THEN '取消'  WHEN 4 THEN '正在运行'  END AS last_run_status ,    STUFF(STUFF(RIGHT('000000'    + CAST(sJOBH.run_duration AS VARCHAR(6)), 6), 3,   0, ':'), 6, 0, ':') AS [LastRunDuration (HH:MM:SS)] , sJOBH.message AS last_run_status_information ,   CASE sJOBSCH.NextRunDate   WHEN 0 THEN NULL   ELSE CAST(CAST(sJOBSCH.NextRunDate AS CHAR(8)) + ' '    + STUFF(STUFF(RIGHT('000000'   + CAST(sJOBSCH.NextRunTime AS VARCHAR(6)),   6), 3, 0, ':'), 6, 0, ':') AS DATETIME)   END AS next_run_time  FROM  msdb.dbo.sysjobsteps AS sJSTP   INNER JOIN msdb.dbo.sysjobs AS sJOB ON sJSTP.job_id = sJOB.job_id   LEFT JOIN msdb.dbo.sysjobsteps AS sOSSTP ON sJSTP.job_id = sOSSTP.job_id   AND sJSTP.on_success_step_id = sOSSTP.step_id  LEFT JOIN msdb.dbo.sysjobsteps AS sOFSTP ON sJSTP.job_id = sOFSTP.job_id  AND sJSTP.on_fail_step_id = sOFSTP.step_id   LEFT JOIN msdb.dbo.sysproxies AS sPROX ON sJSTP.proxy_id = sPROX.proxy_id   LEFT JOIN ( SELECT  job_id ,   MIN(next_run_date) AS NextRunDate ,   MIN(next_run_time) AS NextRunTime   FROM    msdb.dbo.sysjobschedules GROUP BY job_id ) AS sJOBSCH ON sJOB.job_id = sJOBSCH.job_id  LEFT JOIN ( SELECT  job_id ,  run_date ,  run_time ,  run_status ,   run_duration ,   message,    ROW_NUMBER() OVER ( PARTITION BY job_id ORDER BY run_date DESC, run_time DESC ) AS RowNumber    FROM    msdb.dbo.sysjobhistory  WHERE   step_id = 0    ) AS sJOBH ON sJOB.job_id = sJOBH.job_id   AND sJOBH.RowNumber= 1  where sJSTP.database_name=db_name() ORDER BY job_name,step_id   

#统计信息
select Schema_Name, Tab_Name, Update_Date from (select SCHEMA_NAME(tab.schema_id) as Schema_Name,tab.name as Tab_Name,convert(date, stats_date(s.object_id, s.stats_id)) AS Update_Date, row_number() over(partition by tab.object_id order by tab.object_id) rn from sys.tables tab left outer join sys.stats s on tab.object_id = s.object_id where tab.schema_id = SCHEMA_ID()) t where rn = 1 order by Schema_Name, Tab_Name

#排序规则
select name as dbname,@@version as dbversion,collation_name,case recovery_model when 1 then 'FULL'  when 2 then 'BULK_LOGGED' when 3 then 'SIMPLE' end as recovery_model, case state when 0 then 'ONLINE' when 1 then 'RESTORING' when 2 then 'RECOVERING' when 3 then 'RECOVERY_PENDING' when 4 then 'SUSPECT' when 5 then 'EMERGENCY' when 6 then 'OFFLINE' when 7 then 'COPYING (Applies to Windows Azure SQL Database only)' end as db_status,create_date as create_db_date from sys.databases where name=DB_NAME()

#数据库配置信息
select configuration_id,name,cast(value as int) as value,cast(minimum as int) as minimum,cast(maximum as int)as maximum,cast(value_in_use as int) as value_in_use,description,is_dynamic,is_advanced from sys.configurations order by name

#内存使用情况
select * from sys.dm_os_memory_clerks

#数据库空间使用情况
select db_name() database_name,ltrim(str((convert (dec (15,2),dbsize) + convert (dec (15,2),logsize)) * 8192 / 1048576,15,2) + ' MB') database_size,ltrim(str((convert (dec (15,2),dbsize)) * 8192 / 1048576,15,2) + ' MB') dbsize, ltrim(str((convert (dec (15,2),logsize))  * 8192 / 1048576,15,2) + ' MB') logsize, ltrim(str((case when dbsize >= reservedpages then (convert (dec (15,2),dbsize) - convert (dec (15,2),reservedpages))  * 8192 / 1048576 else 0 end),15,2) + ' MB') unallocated_space, ltrim(str(convert(dec (15,2),reservedpages) * 8192 / 1024/1024,15,2) + ' MB') reserved, ltrim(str(convert(dec (15,2),pages) * 8192 / 1024/1024,15,2) + ' MB') data, ltrim(str((convert(dec (15,2),usedpages) - convert(dec (15,2),pages)) * 8192 / 1024/1024,15,2) + ' MB') index_size, ltrim(str((convert(dec (15,2),reservedpages) - convert(dec (15,2),usedpages)) * 8192 / 1024/1024,15,2) + ' MB') unused from  (select sum(convert(bigint,case when status & 64 = 0 then size else 0 end)) dbsize , sum(convert(bigint,case when status & 64 <> 0 then size else 0 end)) logsize from dbo.sysfiles) a,(select sum(a.total_pages) reservedpages, sum(a.used_pages) usedpages, sum(CASE When it.internal_type IN (202, 204, 207, 211, 212, 213, 214, 215, 216, 221, 222) Then 0 When a.type <> 1 and p.index_id < 2 Then a.used_pages When p.index_id < 2 Then a.data_pages Else 0 END) pages from sys.partitions p join sys.allocation_units a on p.partition_id = a.container_id left join sys.internal_tables it on p.object_id = it.object_id) b

#数据库物理文件
SELECT df.name file_name, df.physical_name file_path, df.size page_counts, df.growth, f.name filegroup, f.is_default,df.type_desc,df.state_desc FROM sys.database_files df left outer JOIN sys.filegroups f ON df.data_space_id = f.data_space_id order by df.name


#<link>kill
kill [session_id]
 
#<link>session
select * from sys.dm_exec_sessions where session_id=[session_id]

#<link>联查执行计划
select session_id, query_plan  FROM sys.dm_exec_requests CROSS APPLY sys.dm_exec_query_plan(plan_handle) where plan_handle=0x[plan_handle_link] and session_id=[session_id]

#<link>联查sql
SELECT TOP 10 context_info as client_identifier,SUBSTRING(text, (statement_start_offset/2) + 1, ((CASE statement_end_offset WHEN -1 THEN DATALENGTH(text) ELSE statement_end_offset END - statement_start_offset)/2) + 1) AS sql_text,total_elapsed_time,isnull(wait_type, 'no') as wait_type,wait_resource,session_id,status,blocking_session_id,start_time,db_name(database_id) as dbname,plan_handle as plan_handle_link FROM sys.dm_exec_requests CROSS APPLY sys.dm_exec_sql_text(sql_handle) where session_id=[session_id] ORDER BY total_elapsed_time DESC

#<link>会话详细
select * from sys.dm_exec_requests where session_id=[session_id]

#<link>联查blocking_session_id锁信息
SELECT distinct TL1.resource_type,DB_NAME(TL1.resource_database_id) AS DatabaseName,isnull(CASE TL1.resource_type WHEN 'OBJECT' THEN OBJECT_NAME(TL1.resource_associated_entity_id, TL1.resource_database_id) WHEN 'DATABASE' THEN 'DATABASE' ELSE CASE WHEN TL1.resource_database_id = DB_ID() THEN (SELECT OBJECT_NAME(object_id, TL1.resource_database_id) FROM sys.partitions WHERE hobt_id = TL1.resource_associated_entity_id) ELSE NULL END END,'no') AS ObjectName,TL1.resource_description, TL1.request_session_id as session_id,TL1.request_mode, TL1.request_status,isnull(st.sql_text,'null') as sql_text,isnull(st.parameter_text,'null') as parameter_text,convert(varbinary(64),st.plan_handle) as plan_handle_link,TL1.resource_database_id,TL1.resource_associated_entity_id FROM sys.dm_tran_locks AS TL1 JOIN sys.dm_tran_locks AS TL2 ON TL1.resource_associated_entity_id = TL2.resource_associated_entity_id left outer join (select er.session_id,er.context_info as client_identifier,er.plan_handle,SUBSTRING(text,(statement_start_offset / 2) + 1, ((CASE statement_end_offset WHEN -1 THEN DATALENGTH(text) ELSE statement_end_offset END - statement_start_offset) / 2) + 1) AS sql_text, SUBSTRING(text, 1, (statement_start_offset / 2)) AS parameter_text from sys.dm_exec_requests er cross apply sys.dm_exec_sql_text(er.sql_handle) t) st on tl1.request_session_id=st.session_id WHERE TL1.request_status <> TL2.request_status AND (TL1.resource_description        = TL2.resource_description OR (TL1.resource_description        IS NULL AND TL2.resource_description        IS NULL)) and TL1.resource_description  in (select resource_description from sys.dm_tran_locks where request_status <> 'GRANT') and tl1.request_session_id=[blocking_session_id] ORDER BY TL1.resource_database_id,TL1.resource_associated_entity_id,TL1.request_status ASC;

#end




 